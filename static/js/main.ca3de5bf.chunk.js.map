{"version":3,"sources":["../node_modules/web3-eth-accounts/src sync","components/TableRow.tsx","graphql/queries.tsx","components/Home.tsx","components/CourtsTable.tsx","components/Address.tsx","components/VerticallyCenteredModal.tsx","components/DisputeDetails.tsx","components/DisputesTable.tsx","components/AnalyticsHeader.tsx","components/Header.tsx","components/BarGraph.tsx","components/PieGraph.tsx","App.tsx","serviceWorker.ts","graphql/apollo.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","TableRow","props","onClick","this","style","cursor","borderBottom","borderBottomStyle","borderColor","marginTop","marginBottom","padding","col","map","c","React","Period","Court","DISPUTE_COUNT","gql","TOTAL_COURTS","DISPUTE_WITH_PERIOD","TOP_FIVE_JURY_BY_STAKE_AMOUNT","DISPUTES","REWARD_AND_PUNISHMENT","DISPUTE_PERIODS","DISPUTE_REWARD","TOTAL_STAKED_AMOUNT","TOTAL_JUROR","COURTS","CourtsTable","feeForJuror","str","Web3","utils","fromWei","substring","indexOf","height","overflow","Body","Title","query","loading","error","data","message","courts","d","subcourtID","getJurorFee","minStake","Address","link","address","trigger","placement","overlay","Content","href","target","substr","Component","VerticallyCenteredModal","size","aria-labelledby","centered","show","Header","heading","title","content","Footer","variant","onHide","DisputesDetails","disputeID","variables","newPeriods","length","output","forEach","date","Date","parseInt","timestamp","push","period","toUTCString","tokenAndETHShifts","parseFloat","ETHAmount","toFixed","tokenAmount","disputeId","periodHistory","reward","DisputesTable","state","showModal","onClickDispute","bind","onCloseModal","console","log","setState","disputeCreations","arbitrable","numberOfChoices","AnalyticsHeader","disputeStatistics","totalDisputes","policyUpdates","totalStakeds","totalStakedAmount","rewardStatistics","totalRewardedEthAmount","totalRewardedTokenAmount","totalPunishedTokenAmount","totalJurors","totalJurorCount","bg","Brand","alt","src","width","className","marginLeft","fontSize","BarGraphComponent","dataKey","dataPoint","Object","filter","key","margin","top","right","left","bottom","strokeDasharray","hide","hideXAxis","value","xAxis","offset","position","label","yAxis","angle","fill","Math","floor","random","toString","COLORS","PieGraph","PI","cx","cy","labelLine","outerRadius","entry","index","iconSize","align","layout","verticalAlign","Home","graphData","jurorStakeAmounts","tokens","stakeAmount","name","juror","periodDisputeStatistics","App","Boolean","window","location","hostname","match","apolloClient","ApolloClient","HttpLink","uri","fetch","cache","InMemoryCache","ReactDOM","render","client","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca3de5bf.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 542;","import * as React from \"react\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport {ReactNode} from \"react\";\n\ninterface Props {\n  col: ReactNode[]\n  onClick?: any;\n}\n\ninterface State {\n\n}\n\nexport default class TableRow extends React.Component<Props, State> {\n\n\n  constructor(props: Readonly<Props>) {\n    super(props);\n  }\n\n  render() {\n    return <div onClick={this.props.onClick} style={{cursor: \"pointer\"}}>\n      <Row\n\n        style={{\n      borderBottom: \"1px\",\n      borderBottomStyle: \"solid\",\n      borderColor: \"#e7eaf3\",\n      marginTop: \".75rem\",\n      marginBottom: \".75rem\",\n      padding:\"5px\"\n        }}>\n      {this.props.col.map(c => <Col>{c}</Col>)}\n    </Row>\n    </div>\n  }\n\n}\n\n","import gql from 'graphql-tag'\n\nexport const DISPUTE_COUNT = gql`\n  {\n    disputeStatistics(first: 1){\n      id\n      totalDisputes\n    }\n  }`;\n\nexport const TOTAL_COURTS = gql`\n  {\n    policyUpdates(first: 1,orderBy: subcourtID, orderDirection: desc, where:{policy_not:\"\"}){\n      subcourtID\n    }\n  }\n`;\n\nexport const DISPUTE_WITH_PERIOD = gql`{\n    periodDisputeStatistics{\n    period\n    totalDisputes\n  }\n}`;\n\nexport const TOP_FIVE_JURY_BY_STAKE_AMOUNT = gql`\n  {\n    jurorStakeAmounts(first: 5, orderBy: stakeAmount, orderDirection: desc, where:{stakeAmount_gt:0}){\n      juror\n      stakeAmount\n    }\n  }`;\n\n\nexport const DISPUTES = gql`\n  {\n    disputeCreations(orderBy: blockNumber, orderDirection:desc, first:10){\n      id\n      disputeID\n      arbitrable\n      contractAddress\n      timestamp\n      blockNumber\n      subcourtID\n      numberOfChoices\n      period\n      lastPeriodChange\n      drawsInRound\n      commitsInRound\n      ruled\n    }\n  }\n`;\n\nexport const REWARD_AND_PUNISHMENT = gql`\n  {\n    rewardStatistics(first: 1){\n      id\n      totalRewardedTokenAmount\n      totalRewardedEthAmount\n      totalPunishedTokenAmount\n    }\n  }\n`;\n\nexport const DISPUTE_PERIODS = gql`query ($disputeID: BigInt!) {\n  newPeriods(first: 100, where: {disputeID:$disputeID}, orderBy: timestamp, orderDirection: asc) {\n    id\n    disputeID\n    period\n    timestamp\n    contractAddress\n  }\n}`;\n\nexport const DISPUTE_REWARD = gql\n  `query ($disputeID: BigInt!) {\n    tokenAndETHShifts(where: {disputeID: $disputeID}, orderBy: timestamp, orderDirection: desc) {\n    address\n    tokenAmount\n    ETHAmount\n  }\n}`;\n\nexport const TOTAL_STAKED_AMOUNT = gql`{\n        totalStakeds {\n            totalStakedAmount\n        }\n    }\n`;\n\nexport const TOTAL_JUROR = gql`{\n    totalJurors{\n        totalJurorCount\n    }\n}\n`;\n\n// export const COURTS = gql`{\n//\n//   courts {\n//     id\n//     subcourtID\n//     policy\n//     feeForJuror\n//     minStake\n//     jurorsForCourtJump\n//     alpha\n//     disputeCount\n//   }\n// }\n// `;\n\nexport const COURTS = gql`  \n  query{courts(where:{subcourtID_not:null, minStake_not: null})\n  {\n    id\n    subcourtID\n    policy\n    feeForJuror\n    minStake\n    jurorsForCourtJump\n    alpha\n  }\n  }`\n","import * as React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport CourtsTable from \"./CourtsTable\";\nimport DisputesTable from \"./DisputesTable\";\nimport AnalyticsHeader from \"./AnalyticsHeader\";\nimport Header from \"./Header\";\nimport BarGraphComponent from \"./BarGraph\";\nimport {Query} from 'react-apollo'\nimport {\n  DISPUTE_WITH_PERIOD,\n  TOP_FIVE_JURY_BY_STAKE_AMOUNT,\n  TOTAL_COURTS\n} from \"../graphql/queries\";\nimport Badge from \"react-bootstrap/Badge\";\nimport Web3 from 'web3';\nimport PieGraph from \"./PieGraph\";\n\n\ninterface Props {\n\n}\n\ninterface State {\n\n}\n\nexport enum Period {\n  \"Evidence submission\",\n  \"Commit vote\",\n  \"Vote casting\",\n  \"Appeal\",\n  \"Ruling done\"\n}\n\nexport enum Court  {\n  \"General\",\n  \"Blockchain\",\n  \"Non-Technical\",\n  \"Exchange Token Listing\",\n  \"Technical\",\n  \"Marketing Services\",\n  \"English Language\",\n  \"Video Production\"\n}\n\n\ninterface DisputeWithPeriod {\n  periodDisputeStatistics: Array<{\n    period: Period;\n    totalDisputes: string;\n  }>\n}\n\ninterface TopFiveJuryByStakeAmount {\n  jurorStakeAmounts: Array<{\n    juror: string;\n    stakeAmount: string;\n  }>\n}\n\n\ninterface Variable {\n\n}\nconst topTenBountyHunters = [\n  {\n    name: 'Ram', count: 100,\n  },\n  {\n    name: 'Shayam', count: 90,\n  },\n  {\n    name: 'Golu', count: 80,\n  },\n  {\n    name: 'Molu', count: 70,\n  },\n  {\n    name: 'Kittu', count: 60,\n  },\n  {\n    name: 'Pittu', count: 50,\n  },\n  {\n    name: 'Sittu', count: 40,\n  },\n  {\n    name: 'tittu', count: 30,\n  },\n  {\n    name: 'littu', count: 20,\n  },\n  {\n    name: 'Lottu', count: 10,\n  },\n];\n\nexport default class Home extends React.Component<Props, State> {\n\n\n  constructor(props: Readonly<Props>) {\n    super(props);\n  }\n\n\n  render() {\n    return <Container>\n      <Row>\n        <Header/>\n      </Row>\n      <Row>\n        <Col>\n          <AnalyticsHeader/>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <CourtsTable/>\n        </Col>\n        <Col>\n          <DisputesTable/>\n        </Col>\n      </Row>\n      <Row>\n        <Col>\n          <Query<TopFiveJuryByStakeAmount, Variable>\n            query={TOP_FIVE_JURY_BY_STAKE_AMOUNT}>\n            {({loading, error, data}) => {\n              if (loading) return <span>{'Loading...'}</span>;\n              if (error) return <span>{`Error! ${error.message}`}</span>;\n\n              console.log(data);\n              const graphData = data.jurorStakeAmounts.map(d => {\n                  return {\n                    tokens: parseInt(Web3.utils.fromWei(d.stakeAmount, 'ether')) / 1000,\n                    name: d.juror\n                  };\n                }\n              );\n\n              return <BarGraphComponent data={graphData}\n                                        dataKey='tokens'\n                                        xAxis={\"Juror\"}\n                                        yAxis={\"PNK Token in Kilo(1000) ether\"}\n                                        title={\"Top 5 Jurors by stake amount\"}\n                                        hideXAxis={true}\n              />;\n            }}\n          </Query>\n\n        </Col>\n        <Col>\n\n          <Query<DisputeWithPeriod, Variable> query={DISPUTE_WITH_PERIOD}>\n            {({loading, error, data}) => {\n              if (loading) return <span>{'Loading...'}</span>;\n              if (error) return <span>{`Error! ${error.message}`}</span>;\n\n              console.log(data);\n              const graphData = data.periodDisputeStatistics.map(d => {\n                  return {\n                    value: parseInt(d.totalDisputes),\n                    name: Period[parseInt(d.period + \"\")]\n                  };\n                }\n              );\n\n              console.log('pie graph data  ',graphData)\n              return <PieGraph title={\"Disputes by period\"} data={graphData}/>\n              // return <BarGraphComponent data={graphData}\n              //                           dataKey='disputes'\n              //                           xAxis={\"Disputes state(period)\"}\n              //                           yAxis={\"Disputes count\"}\n              //                           title={\"Disputes by status(Period)\"}\n              // />;\n            }}\n          </Query>\n\n        </Col>\n      </Row>\n    </Container>;\n  }\n}\n","import * as React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport TableRow from \"./TableRow\";\nimport {Query} from \"react-apollo\";\nimport {COURTS, DISPUTES} from \"../graphql/queries\";\nimport {Court, Period} from \"./Home\";\nimport Address from \"./Address\";\nimport Web3 from 'web3'\n\ninterface Props {\n}\n\ninterface State {\n\n}\n\ninterface CourtData {\n  courts: Array<{\n    id: string;\n    subcourtID: string;\n    policy: string;\n    feeForJuror: string;\n    minStake: string;\n    jurorsForCourtJump: string;\n    alpha\n  }>\n}\n\ninterface Variable {\n\n}\nexport default class CourtsTable extends React.Component<Props, State> {\n\n\n  constructor(props: Readonly<Props>) {\n    super(props);\n  }\n\n  getJurorFee(feeForJuror): string {\n    const str = (Web3.utils.fromWei(feeForJuror, 'ether'))\n    return str.substring(0, str.indexOf(\".\") +5);\n  }\n\n\n  render() {\n    return <Card style={{height:\"400px\",overflow:\"scroll\"}}>\n      <Card.Body>\n        <Card.Title>Court Details</Card.Title>\n        <TableRow\n          col={[\n            <strong>Court</strong>,\n           // <strong>Title</strong>,\n           // <strong>Total disputes</strong>,\n            <strong>Juror fee</strong>,\n            <strong>Min stake amount</strong>\n              ]}/>\n        <Query<CourtData, Variable> query={COURTS}>\n          {({loading, error, data}) => {\n            if (loading) return <span>{'Loading...'}</span>;\n            if (error) return <span>{`Error! ${error.message}`}</span>;\n\n            return data.courts.map(d => {\n              return <TableRow\n                col={[Court[d.subcourtID],\n                //  'Some title',\n               //   0,\n                  d.feeForJuror != null ? this.getJurorFee(d.feeForJuror) : 0,\n                  d.minStake != null ? Web3.utils.fromWei(d.minStake, 'ether') : 0\n                ]}/>\n            })\n          }}\n        </Query>\n      </Card.Body>\n    </Card>\n  }\n}\n","import React, {Component} from 'react'\nimport OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\nimport Popover from \"react-bootstrap/Popover\";\n\ninterface Props {\n  address: string;\n}\n\ninterface State {\n\n}\n\nexport default class Address extends Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n\n  render() {\n    const link =`https://etherscan.io/address/${this.props.address}`;\n    return <OverlayTrigger\n      trigger={[ 'hover','click']}\n      placement=\"top\"\n      overlay={\n        <Popover id={this.props.address}>\n          <Popover.Content>\n            <strong>{this.props.address}</strong>\n          </Popover.Content>\n        </Popover>}\n    >\n      <a\n        href={link}\n        target=\"_blank\"> {this.props.address.substr(0, 10) + '...'}</a>\n    </OverlayTrigger>\n\n  }\n}\n","import * as React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\nimport {ReactNode} from \"react\";\n\ninterface Props {\n  onHide:any;\n  show:boolean;\n  title:string;\n  heading:string;\n  content:ReactNode\n}\n\ninterface State {\n\n}\n\nexport default class VerticallyCenteredModal extends React.Component<Props, State> {\n\n  constructor(props: Readonly<Props>) {\n    super(props);\n  }\n\n  render() {\n\n    return <Modal\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n      show={this.props.show}\n    >\n      <Modal.Header>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          {this.props.heading}\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        <h4>{this.props.title}</h4>\n        {this.props.content}\n      </Modal.Body>\n      <Modal.Footer>\n        <Button  variant=\"secondary\" onClick={this.props.onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  }\n}\n","import * as React from \"react\";\nimport TableRow from \"./TableRow\";\nimport {Query} from 'react-apollo'\nimport {\n  DISPUTE_PERIODS, DISPUTE_REWARD\n} from \"../graphql/queries\";\nimport {Period} from \"./Home\";\nimport Web3 from 'web3';\nimport Address from \"./Address\";\n\ninterface Props {\n  disputeId: string;\n}\n\ninterface State {\n  showModal: boolean\n}\n\ninterface Variable {\n  disputeID: string\n}\n\ninterface DisputePeriods {\n  newPeriods: Array<{\n    period: string;\n    timestamp: string\n  }>\n}\n\ninterface Reward {\n  tokenAndETHShifts: Array<{\n    ETHAmount: string;\n    address: string;\n    tokenAmount: string;\n  }>\n}\n\nexport default class DisputesDetails extends React.Component<Props, State> {\n  constructor(props: Readonly<Props>) {\n    super(props);\n  }\n\n  periodHistory(disputeID: string) {\n    return <Query<DisputePeriods, Variable>\n      query={DISPUTE_PERIODS}\n      variables={{disputeID}}\n    >\n      {({loading, error, data}) => {\n        if (loading) return <span>{'Loading...'}</span>;\n        if (error) return <span>{`Error! ${error.message}`}</span>;\n        if (data.newPeriods.length == 0) {\n          return '';\n        }\n        const output = [\n          <strong>Period history</strong>,\n          <TableRow col={[\n            <strong>Period(Status)</strong>,\n            <strong>Timestamp</strong>\n          ]}/>];\n        data.newPeriods.forEach((d) => {\n          const date = new Date(parseInt(d.timestamp) * 1000);\n          output.push(\n            <TableRow col={\n              [\n                Period[parseInt(d.period)],\n                `${date.toUTCString()}`\n              ]\n            }/>\n          )\n        })\n        return output;\n      }}\n    </Query>;\n  }\n\n  reward(disputeID: string) {\n    return <Query<Reward, Variable>\n      query={DISPUTE_REWARD}\n      variables={{disputeID}}\n    >\n      {({loading, error, data}) => {\n        if (loading) return <span>{'Loading...'}</span>;\n        if (error) return <span>{`Error! ${error.message}`}</span>;\n        if (data.tokenAndETHShifts.length == 0) {\n          return '';\n        }\n        const output = [\n          <strong>Reward and Penalty</strong>,\n          <TableRow col={[\n            <strong>Juror Address</strong>,\n            <strong>ETH</strong>,\n            <strong>PNK</strong>\n          ]}/>];\n        data.tokenAndETHShifts.forEach((d) => {\n\n          output.push(\n            <TableRow col={\n              [< Address address={d.address}/>,\n                parseFloat(Web3.utils.fromWei(d.ETHAmount,'ether')).toFixed(2),\n                parseFloat(Web3.utils.fromWei(d.tokenAmount,'ether')).toFixed(2)\n              ]\n            }/>\n          )\n        })\n        return output;\n      }}\n    </Query>;\n  }\n\n  render() {\n    const disputeID = this.props.disputeId;\n    return <div>\n\n      {this.periodHistory(disputeID)}\n      {this.reward(disputeID)}\n\n    </div>\n  }\n}\n","import * as React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport TableRow from \"./TableRow\";\nimport Address from \"./Address\";\nimport {Query} from 'react-apollo'\nimport {TOTAL_COURTS, DISPUTES} from \"../graphql/queries\";\nimport Badge from \"react-bootstrap/Badge\";\nimport {Court, Period} from \"./Home\";\nimport VerticallyCenteredModal from \"./VerticallyCenteredModal\";\nimport DisputesDetails from \"./DisputeDetails\";\n\ninterface Props {\n}\n\ninterface State {\n  showModal: boolean\n  disputeId?: string;\n}\n\ninterface Variable {\n\n}\n\ninterface DisputesData {\n  disputeCreations: Array<{\n    arbitrable:string;\n    contractAddress:string;\n    disputeID:string;\n    id:string;\n    timestamp: string;\n    blockNumber: string;\n    subcourtID: string;\n    numberOfChoices: string;\n    period: string;\n    lastPeriodChange: string;\n    drawsInRound: string;\n    commitsInRound: string;\n    ruled: boolean\n  }>\n}\n\nexport default class DisputesTable extends React.Component<Props, State> {\n\n\n  constructor(props: Readonly<Props>) {\n    super(props);\n    this.state = {\n      showModal: false\n    }\n    this.onClickDispute = this.onClickDispute.bind(this);\n    this.onCloseModal = this.onCloseModal.bind(this);\n  }\n\n  onClickDispute(disputeId) {\n    console.log('dispute clicked');\n    this.setState({showModal: true, disputeId});\n  }\n\n  onCloseModal() {\n    console.log('onCloseModal');\n    this.setState({showModal: false});\n  }\n  render() {\n    return <Card style={{height:\"400px\",overflow:\"scroll\"}}>\n      <Card.Body>\n        <Card.Title>Recent Disputes</Card.Title>\n        <VerticallyCenteredModal\n          show={this.state.showModal}\n          onHide={this.onCloseModal}\n          content={<DisputesDetails disputeId={this.state.disputeId}/>}\n          heading=\"Dispute Details\"\n          title={`Dispute Id ${this.state.disputeId}`}\n        />\n        <TableRow\n          col={[\n            <strong>Id</strong>,\n            //<strong>Dispute Period(Status)</strong>,\n            <strong>Arbitrable</strong>,\n            <strong>Court</strong>,\n            <strong>Choices for Juror</strong>\n          ]}/>\n        <Query<DisputesData, Variable> query={DISPUTES}>\n          {({loading, error, data}) => {\n            if (loading) return <span>{'Loading...'}</span>;\n            if (error) return <span>{`Error! ${error.message}`}</span>;\n\n            return data.disputeCreations.map(d => {\n              return <TableRow /*onClick={() => {\n                this.onClickDispute(d.disputeID)\n              }}*/\n                               col={[d.disputeID, /*Period[parseInt(d.period)]*/,\n                                 <Address\n                  address={d.arbitrable}/>,\n                                 Court[d.subcourtID],\n                                 d.numberOfChoices]}/>\n            })\n          }}\n        </Query>\n      </Card.Body>\n    </Card>\n  }\n}\n","import * as React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Row from \"react-bootstrap/Row\";\nimport Badge from \"react-bootstrap/Badge\";\nimport {Query} from 'react-apollo'\nimport {\n  DISPUTE_COUNT,\n  REWARD_AND_PUNISHMENT,\n  TOTAL_COURTS, TOTAL_JUROR, TOTAL_STAKED_AMOUNT\n} from \"../graphql/queries\";\nimport Web3 from 'web3';\n\ninterface Props {\n}\n\ninterface State {\n\n}\n\ninterface DisputeData {\n  disputeStatistics: Array<{\n    id: string;\n    totalDisputes: string;\n  }>\n}\n\ninterface CourtData {\n  policyUpdates: Array<{\n    subcourtID: string;\n  }>\n}\n\ninterface TotalStakedData {\n  totalStakeds: Array<{\n    totalStakedAmount: string;\n  }>\n}\n\ninterface TotalJurorData {\n  totalJurors: Array<{\n    totalJurorCount: string;\n  }>\n}\n\ninterface RewardData {\n  rewardStatistics: Array<{\n    totalRewardedTokenAmount: string;\n    totalRewardedEthAmount: string;\n    totalPunishedTokenAmount: string;\n  }>\n}\n\ninterface Variable {\n\n}\n\nexport default class AnalyticsHeader extends React.Component<Props, State> {\n\n\n  constructor(props: Readonly<Props>) {\n    super(props);\n  }\n\n\n  render() {\n\n    return <Card>\n      <Card.Body>\n        <Row style={{\n          borderBottom: \"1px\",\n          borderBottomStyle: \"solid\",\n          borderColor: \"#e7eaf3\",\n          marginTop: \".75rem\",\n          marginBottom: \".75rem\",\n          padding:\"5px\"\n        }}>\n          <Col>\n            <strong>Total disputes:</strong> <Badge variant=\"secondary\">\n\n            <Query<DisputeData, Variable> query={DISPUTE_COUNT}>\n              {({loading, error, data}) => {\n                if (loading) return <span>{'Loading...'}</span>;\n                if (error) return <span>{`Error! ${error.message}`}</span>;\n\n                return <span>{data.disputeStatistics[0].totalDisputes}</span>;\n              }}\n            </Query>\n          </Badge>\n          </Col>\n          <Col>\n            <strong>Total active courts:</strong> <Badge variant=\"secondary\">\n            <Query<CourtData, Variable> query={TOTAL_COURTS}>\n              {({loading, error, data}) => {\n                if (loading) return <span>{'Loading...'}</span>;\n                if (error) return <span>{`Error! ${error.message}`}</span>;\n\n                return <span>{parseInt(data.policyUpdates[0].subcourtID) + 1}</span>;\n              }}\n            </Query>\n\n          </Badge>\n          </Col>\n          <Col>\n            <strong>Total staked amount:</strong>\n            <Badge variant=\"secondary\">\n            <Query<TotalStakedData, Variable> query={TOTAL_STAKED_AMOUNT}>\n            {({loading, error, data}) => {\n              if (loading) return <span>{'Loading...'}</span>;\n              if (error) return <span>{`Error! ${error.message}`}</span>;\n\n              return <span>{\n                parseFloat(Web3.utils.fromWei(\n                  data.totalStakeds[0].totalStakedAmount,\n                  'ether'\n                )).toFixed(3)\n              }</span>;\n            }}\n          </Query>\n\n          </Badge>\n          </Col>\n        </Row>\n\n        <Query<RewardData, Variable> query={REWARD_AND_PUNISHMENT}>\n          {({loading, error, data}) => {\n            if (loading) return <span>{'Loading...'}</span>;\n            if (error) return <span>{`Error! ${error.message}`}</span>;\n\n            return <Row style={{\n              borderBottom: \"1px\",\n              borderBottomStyle: \"solid\",\n              borderColor: \"#e7eaf3\",\n              marginTop: \".75rem\",\n              marginBottom: \".75rem\",\n              padding: \"5px\"\n            }}>\n\n              <Col>\n                <strong>Total earnings(ETH):</strong> <Badge\n                variant=\"secondary\">\n                {\n                  parseFloat(Web3.utils.fromWei(\n                    data.rewardStatistics[0].totalRewardedEthAmount,\n                    'ether'\n                  )).toFixed(3)\n                }\n              </Badge>\n              </Col>\n              <Col>\n                <strong>Total earnings(PNK):</strong> <Badge\n                variant=\"secondary\">\n                {\n                  parseFloat(Web3.utils.fromWei(\n                    data.rewardStatistics[0].totalRewardedTokenAmount,\n                    'ether'\n                  )).toFixed(3)\n                }\n\n              </Badge>\n              </Col>\n              <Col>\n                <strong>Total penalty(PNK):</strong> <Badge\n                variant=\"secondary\">\n                {\n                  parseFloat(Web3.utils.fromWei(data.rewardStatistics[0].totalPunishedTokenAmount.substr(1),\n                    'ether'\n                  )).toFixed(3)\n                }\n              </Badge>\n\n              </Col>\n            </Row>;\n          }}\n        </Query>\n\n        <Row style={{\n          borderBottom: \"1px\",\n          borderBottomStyle: \"solid\",\n          borderColor: \"#e7eaf3\",\n          marginTop: \".75rem\",\n          marginBottom: \".75rem\",\n          padding:\"5px\"\n        }}>\n          <Col>\n            <strong>Total jurors who staked:</strong> <Badge variant=\"secondary\">\n\n            <Query<TotalJurorData, Variable> query={TOTAL_JUROR}>\n            {({loading, error, data}) => {\n              if (loading) return <span>{'Loading...'}</span>;\n              if (error) return <span>{`Error! ${error.message}`}</span>;\n\n              return <span>{data.totalJurors[0].totalJurorCount}</span>;\n            }}\n          </Query>\n          </Badge>\n        </Col>\n      </Row>\n\n      </Card.Body>\n    </Card>\n  }\n}\n","import * as React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\ninterface Props {\n}\n\ninterface State {\n\n}\n\nexport default class Header extends React.Component<Props, State> {\n\n\n  constructor(props: Readonly<Props>) {\n    super(props);\n  }\n\n\n  render() {\n    return <Container>\n      <Navbar bg=\"white\">\n        <Navbar.Brand href=\"#home\">\n          <img\n            alt=\"Metrics Dashboard | Kleros\"\n            src=\"logo.png\"\n            width=\"90\"\n            height=\"90\"\n            className=\"d-inline-block align-top\"\n          />\n        </Navbar.Brand>\n        <Navbar.Brand style={{marginLeft: \"20%\"}}><strong style={{fontSize:\"24px\"}}>Performance Metrics Dashboard</strong></Navbar.Brand>\n      </Navbar>\n    </Container>\n  }\n}\n","import React from 'react';\nimport {\n  BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, Label,\n} from 'recharts';\nimport Card from \"react-bootstrap/Card\";\n\ninterface Props {\n  dataKey: string;\n  data: any[];\n  xAxis: string;\n  yAxis: string;\n  title: string;\n  hideXAxis?:boolean;\n}\n\ninterface State {\n\n}\n\nexport default class BarGraphComponent extends React.Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n\n  }\n\n  render() {\n    if (this.props.dataKey.length == 0) {\n      return null;\n    }\n    const dataPoint = this.props.data[0];\n    console.log('datapoint  ', dataPoint);\n    const keys = Object.keys(dataPoint).filter(key => key !== 'name');\n    console.log('keys  ', keys);\n    return (\n      <Card style={{height: \"100%\"}}>\n        <Card.Body>\n           <Card.Title>{this.props.title}</Card.Title>\n          <BarChart\n\n            width={450}\n            height={300}\n            data={this.props.data}\n            margin={{\n              top: 30, right: 30, left: 20, bottom: 5,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\"/>\n            <XAxis dataKey=\"name\" hide={this.props.hideXAxis} >\n              <Label value={this.props.xAxis}\n                     offset={-5}\n                     position=\"insideBottom\" />\n            </XAxis>\n            <YAxis label={{\n              value: `${this.props.yAxis}`,\n              offset: -2,\n              angle: -90,\n              position: 'insideBottomLeft'\n            }}/>\n            <Tooltip/>\n            {\n              keys.length !=1? <Legend /> : null\n            }\n\n            {keys.map(key =>\n              <Bar dataKey={key} fill={'#'+Math.floor(Math.random()*16777215).toString(16)}/>\n            )}\n\n          </BarChart>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n","import React, {PureComponent} from 'react';\nimport {\n  PieChart, Pie, Sector, Cell, PieProps, Legend, Tooltip\n} from 'recharts';\nimport Card from \"react-bootstrap/Card\";\n\ninterface State {\n\n}\n\ninterface Props {\n  data: Array<{\n    name: string;\n    value: number;\n  }>\n  title: string;\n}\n\nconst COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042'];\n\nconst RADIAN = Math.PI / 180;\n\nexport default class PieGraph extends React.Component<Props, State> {\n\n  constructor(props: Props) {\n    super(props);\n\n  }\n\n\n  render() {\n\n    return (\n      <Card>\n        <Card.Body>\n          <Card.Title>{this.props.title}</Card.Title>\n          <PieChart width={470} height={470}>\n            <Pie\n              data={this.props.data}\n              cx={230}\n              cy={200}\n              labelLine={false}\n              outerRadius={80}\n              fill=\"#8884d8\"\n              dataKey=\"value\"\n            >\n              {\n                this.props.data.map((entry, index) => <Cell\n                  key={`cell-${index}`}\n                  fill={COLORS[index % COLORS.length]}/>)\n              }\n            </Pie>\n            <Legend iconSize={10}\n                    width={120}\n                    height={140}\n                    align=\"left\"\n                    layout=\"horizontal\"\n                    verticalAlign=\"middle\"\n            />\n            <Tooltip/>\n          </PieChart>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport Home from \"./components/Home\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Home/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ApolloClient from 'apollo-client'\nimport { HttpLink } from 'apollo-link-http'\nimport { InMemoryCache } from 'apollo-cache-inmemory'\nimport fetch from 'unfetch';\n\nconst endpoints = {\n  simple: 'https://api.thegraph.com/subgraphs/name/quilldata/kleros',\n  ws: 'wss://api.thegraph.com/subgraphs/name/quilldata/kleros'\n}\n\nexport const apolloClient = new ApolloClient({\n  link: new HttpLink({ uri: endpoints.simple, fetch: fetch }),\n  cache: new InMemoryCache()\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ApolloProvider from \"react-apollo/ApolloProvider\";\nimport {apolloClient} from \"./graphql/apollo\";\n\nReactDOM.render(\n  <ApolloProvider client={apolloClient}>\n  <App />\n  </ApolloProvider>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}