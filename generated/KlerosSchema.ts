// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class NewPeriod extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save NewPeriod entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save NewPeriod entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("NewPeriod", id.toString(), this);
  }

  static load(id: string): NewPeriod | null {
    return store.get("NewPeriod", id) as NewPeriod | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _period(): i32 {
    let value = this.get("_period");
    return value.toI32();
  }

  set _period(value: i32) {
    this.set("_period", Value.fromI32(value));
  }

  get _session(): BigInt {
    let value = this.get("_session");
    return value.toBigInt();
  }

  set _session(value: BigInt) {
    this.set("_session", Value.fromBigInt(value));
  }
}

export class TokenShift extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TokenShift entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TokenShift entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TokenShift", id.toString(), this);
  }

  static load(id: string): TokenShift | null {
    return store.get("TokenShift", id) as TokenShift | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _account(): Bytes {
    let value = this.get("_account");
    return value.toBytes();
  }

  set _account(value: Bytes) {
    this.set("_account", Value.fromBytes(value));
  }

  get _disputeID(): BigInt {
    let value = this.get("_disputeID");
    return value.toBigInt();
  }

  set _disputeID(value: BigInt) {
    this.set("_disputeID", Value.fromBigInt(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }
}

export class ArbitrationReward extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ArbitrationReward entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ArbitrationReward entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ArbitrationReward", id.toString(), this);
  }

  static load(id: string): ArbitrationReward | null {
    return store.get("ArbitrationReward", id) as ArbitrationReward | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _account(): Bytes {
    let value = this.get("_account");
    return value.toBytes();
  }

  set _account(value: Bytes) {
    this.set("_account", Value.fromBytes(value));
  }

  get _disputeID(): BigInt {
    let value = this.get("_disputeID");
    return value.toBigInt();
  }

  set _disputeID(value: BigInt) {
    this.set("_disputeID", Value.fromBigInt(value));
  }

  get _amount(): BigInt {
    let value = this.get("_amount");
    return value.toBigInt();
  }

  set _amount(value: BigInt) {
    this.set("_amount", Value.fromBigInt(value));
  }
}

export class AppealPossible extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AppealPossible entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AppealPossible entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AppealPossible", id.toString(), this);
  }

  static load(id: string): AppealPossible | null {
    return store.get("AppealPossible", id) as AppealPossible | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _disputeID(): BigInt {
    let value = this.get("_disputeID");
    return value.toBigInt();
  }

  set _disputeID(value: BigInt) {
    this.set("_disputeID", Value.fromBigInt(value));
  }
}

export class DisputeCreation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DisputeCreation entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DisputeCreation entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DisputeCreation", id.toString(), this);
  }

  static load(id: string): DisputeCreation | null {
    return store.get("DisputeCreation", id) as DisputeCreation | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _disputeID(): BigInt {
    let value = this.get("_disputeID");
    return value.toBigInt();
  }

  set _disputeID(value: BigInt) {
    this.set("_disputeID", Value.fromBigInt(value));
  }

  get _arbitrable(): Bytes {
    let value = this.get("_arbitrable");
    return value.toBytes();
  }

  set _arbitrable(value: Bytes) {
    this.set("_arbitrable", Value.fromBytes(value));
  }
}

export class AppealDecision extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save AppealDecision entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save AppealDecision entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("AppealDecision", id.toString(), this);
  }

  static load(id: string): AppealDecision | null {
    return store.get("AppealDecision", id) as AppealDecision | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _disputeID(): BigInt {
    let value = this.get("_disputeID");
    return value.toBigInt();
  }

  set _disputeID(value: BigInt) {
    this.set("_disputeID", Value.fromBigInt(value));
  }

  get _arbitrable(): Bytes {
    let value = this.get("_arbitrable");
    return value.toBytes();
  }

  set _arbitrable(value: Bytes) {
    this.set("_arbitrable", Value.fromBytes(value));
  }
}
